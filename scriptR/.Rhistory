knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/Stage/Simulations/old_methis_pop_size_diff/")
library(stringr)
library(ggplot2)
#Data frame construction
data.frame.stat = function(seq_ne, max_gen){
#Créer matrice vide qui contiendra les stats
mat_stat = matrix(data = NA, nrow = length(seq_ne)*max_gen, ncol = 62)
#Compteur pour indiquer les lignes à remplir
cpt = 0
for (ne in seq_ne) {
dir_ne = str_c("Ne", toString(ne), "/") #Répertoire de taille effective
row_min = cpt*100+1                     #Ligne min. où on écrit les stats pour le Ne donné
row_max = (cpt+1)*100                   #Ligne max. où on écrit les stats
mat_stat[row_min:row_max,1] = toString(ne) #Ecriture du Ne correspondant pour les stats qui seront écrites
cpt = cpt+1                             #Incrémentation du compteur
for (nb_gen in 1:max_gen) {
dir_gen = str_c("gen", toString(nb_gen), "/") #Répertoire de génération
mat_stat[row_min+nb_gen-1,2] = nb_gen         #Ecriture génération correspondante
file_path = str_c(dir_ne, dir_gen, "final_sumstats.txt")
file_stat = read.table(file_path, header = TRUE) #Lecture fichier stat résumées
#Suppression 1ère colonne, contenant uniquement chiffres pour tri en bash.
#+ calcul de la moyenne pour chaque stat, écrites dans la matrice
file_stat = apply(file_stat[,-1], 2, mean)
mat_stat[row_min+nb_gen-1,3:62] = file_stat
}
}
#Passage de la matrice en data frame pour ggplot
mat_stat = as.data.frame(mat_stat)
#Attribution nom colonnes selon appelation stat par MetHis
colnames(mat_stat) = c("Ne", "gen", names(file_stat))
#Passage des Ne en facteur
mat_stat$Ne = factor(as.factor(mat_stat$Ne), levels = as.character(seq_ne))
#Passage générations en entier
mat_stat$gen = as.integer(mat_stat$gen)
#Passage stats en double
for (numcol in 3:ncol(mat_stat)) {
mat_stat[,numcol] = as.double(mat_stat[,numcol])
}
return(mat_stat)
}
#Plot function
#Affichage d'une stat au cours des générations
plot_stat_gen = function(df, gen, stat, Ne, titre){
p = ggplot(df, aes(x = gen, y = stat, color = Ne)) + ggtitle(titre)
#smooth de la courbe pour obtenir régression et tempérer variabilité due au TCL
p = p + geom_point(size = 1)+ geom_smooth()
print(p)
}
extract_sub_mat = function(all_mat, list_ne){
all_rows = c()
for (ne in as.character(list_ne)) {
all_rows = append(all_rows, which(all_mat[,1] == ne))
}
return(all_mat[all_rows,])
}
seq_64_8192 = 2**seq(6,13,1)
seq_60_100 = 10*seq(6,10,1)
seq_tot = sort(c(seq_60_100, seq_64_8192))
mat_tot = data.frame.stat(seq_tot, 100)
setwd()
getwd()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/Stage/Simulations/old_methis_pop_size_diff/")
getwd()
getwd()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/Documents/M2_BI/Stage/Simulations/old_methis_pop_size_diff/")
getwd()
seq_64_8192 = 2**seq(6,13,1)
seq_60_100 = 10*seq(6,10,1)
seq_tot = sort(c(seq_60_100, seq_64_8192))
mat_tot = data.frame.stat(seq_tot, 100)
mat_60_100 = extract_sub_mat(mat_tot, seq_60_100)
mat_64_8192 = extract_sub_mat(mat_tot, seq_64_8192)
plot_stat_gen(mat_tot, mat_tot$gen,
mat_tot$mean.het.adm, mat_tot$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales")
plot_stat_gen(mat_60_100, mat_60_100$gen,
mat_60_100$mean.het.adm, mat_60_100$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales")
plot_stat_gen(mat_64_8192, mat_64_8192$gen,
mat_64_8192$mean.het.adm, mat_64_8192$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales")
