install.packages("stringr")
install.packages("e1071")
install.packages("abcrf")
install.packages("ade4")
install.packages("quantreg")
getwd()
setwd("home/maelpretet/")
library(stringr)
library(ggplot2)
setwd("Documents/git_repository/Stage/Simulations/stat_gen_par_gen_TCL_64-8192")
#Paramètres modifiables
min_ne = 6
max_ne = 13
max_gen = 100
max_simu = 100
base_used = 2
#Lecture des données statistiques résumées
Ne_all = list()
for (pow in c(min_ne:max_ne)) {
dir_ne = str_c("Ne", toString(base_used**pow), "/")
setwd(dir_ne)
Ne_all[[pow]] = list()
for (nb_gen in 1:max_gen) {
dir_gen = str_c("gen", toString(nb_gen), "/")
setwd(dir_gen)
Ne_all[[pow]][[nb_gen]] = data.frame()
for (nb_simu in 1:max_simu) {
dir_simu = str_c("simu_", toString(nb_simu), "/")
setwd(dir_simu)
getwd()
if (nb_simu == 1) {
Ne_all[[pow]][[nb_gen]] = read.table("final_sumstats.txt",
header = TRUE)
}else{
Ne_all[[pow]][[nb_gen]] = rbind(Ne_all[[pow]][[nb_gen]],
read.table("final_sumstats.txt",
header = TRUE))
}
setwd("../")
}
setwd("../")
}
setwd("../")
}
#Afficher graphique d'une stat choisie
for (i in min_ne:max_ne) {
vec_mean = c()
for (j in 1:max_gen) {
vec_mean[j] = mean(Ne_all[[i]][[j]]$mean.het.adm)
}
if (i == min_ne) {
plot(vec_mean, type = "l", col = i, ylim = c(0,0.5))
}else{
lines(c(1:100),vec_mean, type = 'l', col = i)
}
}
plot(vec_mean, type = "l", col = i, ylim = c(0,0.01))
#Afficher graphique d'une stat choisie
for (i in min_ne:max_ne) {
vec_mean = c()
for (j in 1:max_gen) {
vec_mean[j] = mean(Ne_all[[i]][[j]]$mean.het.adm)
}
if (i == min_ne) {
plot(vec_mean, type = "l", col = i, ylim = c(0,0.01))
}else{
lines(c(1:100),vec_mean, type = 'l', col = i)
}
}
#Afficher graphique d'une stat choisie
for (i in min_ne:max_ne) {
vec_mean = c()
for (j in 1:max_gen) {
vec_mean[j] = mean(Ne_all[[i]][[j]]$mean.het.adm)
}
if (i == min_ne) {
plot(vec_mean, type = "l", col = i, ylim = c(0,0.1))
}else{
lines(c(1:100),vec_mean, type = 'l', col = i)
}
}
legend("topleft",
legend = c("Ne64", "Ne128", "Ne256", "Ne512",
"Ne1024", "Ne2048", "Ne4096", "Ne8192"),
col = c(min_ne:max_ne),
lty =1, cex = 0.5)
mat_Fst_1_adm = matrix(data = NA, nrow = (max_ne-min_ne+1)*max_gen,
ncol = 3)
for (pow in c(min_ne:max_ne)) {
dir_ne = str_c("Ne", toString(base_used**pow), "/")
setwd(dir_ne)
row_min = (pow-min_ne)*100+1
row_max = (pow-min_ne+1)*100
mat_Fst_1_adm[row_min:row_max,1] = str_c("Ne", toString(base_used**pow))
for (nb_gen in 1:max_gen) {
dir_gen = str_c("gen", toString(nb_gen), "/")
setwd(dir_gen)
mat_Fst_1_adm[row_min+nb_gen-1,2] = nb_gen
for (nb_simu in 1:max_simu) {
dir_simu = str_c("simu_", toString(nb_simu), "/")
setwd(dir_simu)
if (nb_simu == 1) {
stock_tmp = read.table("final_sumstats.txt",
header = TRUE)
}else{
stock_tmp = rbind(stock_tmp,
read.table("final_sumstats.txt",
header = TRUE))
}
setwd("../")
}
mat_Fst_1_adm[row_min+nb_gen-1,3] = mean(stock_tmp$mean.het.adm)
setwd("../")
}
setwd("../")
}
mat_Fst_1_adm = as.data.frame(mat_Fst_1_adm)
colnames(mat_Fst_1_adm) = c("Ne", "gen", "Fst")
mat_Fst_1_adm$gen = as.integer(mat_Fst_1_adm$gen)
mat_Fst_1_adm$Fst = as.double(mat_Fst_1_adm$Fst)
#Graphiques de Fst 1-adm avec ggplot
p = ggplot(mat_Fst_1_adm, aes(x = gen, y = Fst, color = Ne)) +
ggtitle("Htz en fonction des générations\n selon différentes Ne initiales")
p = p + geom_point(size = 2) + geom_line(size=0.8)
#Graphiques de Fst 1-adm avec ggplot
p = ggplot(mat_Fst_1_adm, aes(x = gen, y = Fst, color = Ne)) +
ggtitle("Htz en fonction des générations\n selon différentes Ne initiales")
p = p + geom_point(size = 2)+ geom_smooth()
p
#Graphiques de Fst 1-adm avec ggplot
p = ggplot(mat_Fst_1_adm, aes(x = gen, y = Fst, color = Ne)) +
ggtitle("Htz en fonction des générations\n selon différentes Ne initiales")
p = p + geom_point(size = 2) + geom_line(size=0.8)
p
knitr::opts_chunk$set(echo = TRUE)
stock_tmp
stock_tmp
p
#Graphiques de Fst 1-adm avec ggplot
p = ggplot(mat_Fst_1_adm, aes(x = gen, y = Fst, color = Ne)) +
ggtitle("Htz en fonction des générations\n selon différentes Ne initiales")
p = p + geom_point(size = 2)+ geom_smooth()
p
dir_gen
file_path = str_c(dir_ne, dir_gen, "final_sumstats.txt")
file_path
file_stat = read.table(file_path, header = TRUE)
getwd()
read.table("Ne8192/gen100/final_sumstats.txt")
file_path
file_path = str_c(dir_ne, dir_gen, "final_sumstats.txt")
file_path
file_stat = read.table(file_path, header = TRUE)
file_stat = read.table("Ne8192/gen100/final_sumstats.txt", header = TRUE)
header(file_stat)
head(file_stat)
file_path = str_c(dir_ne, dir_gen, "final_sumstats.txt")
file_stat = read.table(file_path, header = TRUE)
file_stat = read.table(file_path, header = TRUE)
file_stat = read.table(file_path, header = TRUE)
file_stat = read.table(file_path, header = TRUE)
file_stat = read.table(file_path, header = TRUE)
file_stat = read.table(file_path, header = TRUE)
read.table("Ne8192/gen100/final_sumstats.txt")
getwd()
file_path
file_path
read.table("Ne8192/gen100/final_sumstats.txt")
file_stat = read.table(file_path, header = TRUE)
file_path
read.table("Ne8192/gen100/final_sumstats.txt")
read.table(file_path, header = TRUE)
file_path
file_path
read.table(file_path
)
read.table("Ne8192/gen100/final_sumstats.txt", header = TRUE)
read.table(file_path, header = TRUE)
?read.table
file_stat = read.table(file_path)
setwd()
getwd()
file_stat = read.table(file_path)
read.table(file_path)
file_path
read.table("Ne8192/gen100/final_sumstats.txt")
read.table(file_path)
read.table(file_path)
read.table(file_path)
read.table(file_path)
read.table(file_path)
read.table(file_path)
read.table(file_path)
read.table(file_path)
read.table(file_path)
read.table(file_path)
read.table(file_path)
read.table(file_path)
read.table(file_path)
read.table(file_path)
read.table(file_path)
read.table(file_path)
read.table(file_path)
read.table(file_path)
read.table(file_path)
read.table(file_path)
getwd()
getwd()
setwd("Documents/git_repository/Stage/Simulations/stat_gen_par_gen_TCL_64-8192")
getwd()
setwd("~/Documents/git_repository/Stage/Simulations/stat_gen_par_gen_TCL_64-8192/")
file_stat = read.table(file_path)
getwd()
```{r, include=FALSE}
setwd("~/Documents/git_repository/Stage/Simulations/stat_gen_par_gen_TCL_64-8192/")
setwd("~/Documents/git_repository/Stage/Simulations/stat_gen_par_gen_TCL_64-8192/")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/Documents/git_repository/Stage/Simulations/stat_gen_par_gen_TCL_64-8192/")
getwd()
file_stat = read.table(file_path, header = TRUE)
file_stat
file_stat
apply(file_stat, 2, mean)
3:62
row_min+nb_gen-1
file_stat
file_stat
file_stat
file_stat
file_stat = apply(file_stat[-1], 2, mean)
file_stat
file_stat[1,]
file_stat[1]
data.frame.stat = function(min_ne, max_ne, max_gen, max_simu, base_used){
mat_stat = matrix(data = NA, nrow = (max_ne-min_ne+1)*max_gen, ncol = 62)
for (pow in c(min_ne:max_ne)) {
dir_ne = str_c("Ne", toString(base_used**pow), "/")
row_min = (pow-min_ne)*100+1
row_max = (pow-min_ne+1)*100
mat_stat[row_min:row_max,1] = str_c("Ne", toString(base_used**pow))
for (nb_gen in 1:max_gen) {
dir_gen = str_c("gen", toString(nb_gen), "/")
mat_stat[row_min+nb_gen-1,2] = nb_gen
file_path = str_c(dir_ne, dir_gen, "final_sumstats.txt")
file_stat = read.table(file_path, header = TRUE)
file_stat = apply(file_stat[-1], 2, mean)
}
mat_stat[row_min+nb_gen-1,3:62] = file_stat
}
mat_stat = as.data.frame(mat_stat)
colnames(mat_stat) = c("Ne", "gen", "stat")
mat_stat$gen = as.integer(mat_stat$gen)
mat_stat$stat = as.double(mat_stat$stat)
return(mat_stat)
}
data.frame.stat(6, 13, 100, 100, 2)
mat_save = data.frame.stat(6, 13, 100, 100, 2)
View(mat_save)
mat_stat
mat_stat = matrix(data = NA, nrow = (max_ne-min_ne+1)*max_gen, ncol = 62)
min_ne = 6
max_ne = 13
max_gen = 100
max_simu = 100
base_used = 2
mat_stat = matrix(data = NA, nrow = (max_ne-min_ne+1)*max_gen, ncol = 62)
mat_stat
for (pow in c(min_ne:max_ne)) {
dir_ne = str_c("Ne", toString(base_used**pow), "/")
row_min = (pow-min_ne)*100+1
row_max = (pow-min_ne+1)*100
mat_stat[row_min:row_max,1] = str_c("Ne", toString(base_used**pow))
for (nb_gen in 1:max_gen) {
dir_gen = str_c("gen", toString(nb_gen), "/")
mat_stat[row_min+nb_gen-1,2] = nb_gen
file_path = str_c(dir_ne, dir_gen, "final_sumstats.txt")
file_stat = read.table(file_path, header = TRUE)
file_stat = apply(file_stat[-1], 2, mean)
}
mat_stat[row_min+nb_gen-1,3:62] = file_stat
}
View(mat_stat)
row_min:row_max
str_c("Ne", toString(base_used**pow))
mat_stat[row_min:row_max,1]
mat_stat[row_min+nb_gen-1,2
]
row_min+nb_gen-1
nb_gen
row_min+nb_gen-1,3:62
mat_stat[row_min+nb_gen-1,3:62]
View(mat_stat)
for (pow in c(min_ne:max_ne)) {
dir_ne = str_c("Ne", toString(base_used**pow), "/")
row_min = (pow-min_ne)*100+1
row_max = (pow-min_ne+1)*100
mat_stat[row_min:row_max,1] = str_c("Ne", toString(base_used**pow))
for (nb_gen in 1:max_gen) {
dir_gen = str_c("gen", toString(nb_gen), "/")
mat_stat[row_min+nb_gen-1,2] = nb_gen
file_path = str_c(dir_ne, dir_gen, "final_sumstats.txt")
file_stat = read.table(file_path, header = TRUE)
file_stat = apply(file_stat[-1], 2, mean)
mat_stat[row_min+nb_gen-1,3:62] = file_stat
}
}
View(mat_save)
colnames(file_stat[-1,])
colnames(file_stat[-1])
file_stat
names(file_stat[-1])
names(file_stat)
colnames(mat_stat)
mat_stat
colnames(mat_stat) = c("Ne", "gen", names(file_stat))
colnames(mat_stat)
data.frame.stat = function(min_ne, max_ne, max_gen, max_simu, base_used){
mat_stat = matrix(data = NA, nrow = (max_ne-min_ne+1)*max_gen, ncol = 62)
for (pow in c(min_ne:max_ne)) {
dir_ne = str_c("Ne", toString(base_used**pow), "/")
row_min = (pow-min_ne)*100+1
row_max = (pow-min_ne+1)*100
mat_stat[row_min:row_max,1] = str_c("Ne", toString(base_used**pow))
for (nb_gen in 1:max_gen) {
dir_gen = str_c("gen", toString(nb_gen), "/")
mat_stat[row_min+nb_gen-1,2] = nb_gen
file_path = str_c(dir_ne, dir_gen, "final_sumstats.txt")
file_stat = read.table(file_path, header = TRUE)
file_stat = apply(file_stat[-1], 2, mean)
mat_stat[row_min+nb_gen-1,3:62] = file_stat
}
}
mat_stat = as.data.frame(mat_stat)
colnames(mat_stat) = c("Ne", "gen", names(file_stat))
mat_stat$gen = as.integer(mat_stat$gen)
mat_stat[,3:62] = as.double(mat_stat[,3:62])
return(mat_stat)
}
mat_save = data.frame.stat(6, 13, 100, 100, 2)
mat_stat[,3:62] = as.double(mat_stat[,3:62])
mat_stat[,3:62]
as.double(mat_stat[,3:62])
mat_stat[,3:62] = as.double(mat_stat[,3:62])
mat_stat[,3:62]
data.frame.stat = function(min_ne, max_ne, max_gen, max_simu, base_used){
mat_stat = matrix(data = NA, nrow = (max_ne-min_ne+1)*max_gen, ncol = 62)
for (pow in c(min_ne:max_ne)) {
dir_ne = str_c("Ne", toString(base_used**pow), "/")
row_min = (pow-min_ne)*100+1
row_max = (pow-min_ne+1)*100
mat_stat[row_min:row_max,1] = str_c("Ne", toString(base_used**pow))
for (nb_gen in 1:max_gen) {
dir_gen = str_c("gen", toString(nb_gen), "/")
mat_stat[row_min+nb_gen-1,2] = nb_gen
file_path = str_c(dir_ne, dir_gen, "final_sumstats.txt")
file_stat = read.table(file_path, header = TRUE)
file_stat = apply(file_stat[-1], 2, mean)
mat_stat[row_min+nb_gen-1,3:62] = file_stat
}
}
mat_stat = as.data.frame(mat_stat)
colnames(mat_stat) = c("Ne", "gen", names(file_stat))
mat_stat$gen = as.integer(mat_stat$gen)
for (numcol in 3:ncol(mat_stat)) {
mat_stat[,numcol] = as.double(mat_stat[,numcol])
}
return(mat_stat)
}
mat_save = data.frame.stat(6, 13, 100, 100, 2)
View(mat_save)
#Graphiques avec ggplot
p = ggplot(mat_Fst_1_adm, aes(x = gen, y = Fst.s1.adm, color = Ne)) +
ggtitle("Htz en fonction des générations\n selon différentes Ne initiales")
p = p + geom_point(size = 2)+ geom_smooth()
p
#Graphiques avec ggplot
p = ggplot(mat_save, aes(x = gen, y = Fst.s1.adm, color = Ne)) +
ggtitle("Htz en fonction des générations\n selon différentes Ne initiales")
p = p + geom_point(size = 2)+ geom_smooth()
p
seq(6,13,1)
2**seq(6,13,1)
a = 2**seq(6,13,1)
typeof(a)
a[1]
len(a)
length(a)
row_min
10*seq(6,10,1)
10*seq(6,10,1)
a = c(2**seq(6,13,1), 10*seq(6,10,1))
a
seq_ne = c(2**seq(6,13,1), 10*seq(6,10,1))
seq_ne
mat_save = data.frame.stat(seq_ne, 100)
data.frame.stat = function(seq_ne, max_gen){
mat_stat = matrix(data = NA, nrow = length(seq_ne)*max_gen, ncol = 62)
cpt = 0
for (ne in seq_ne) {
dir_ne = str_c("Ne", toString(ne), "/")
row_min = cpt*100+1
row_max = (cpt+1)*100
mat_stat[row_min:row_max,1] = str_c("Ne", toString(ne))
cpt = cpt+1
for (nb_gen in 1:max_gen) {
dir_gen = str_c("gen", toString(nb_gen), "/")
mat_stat[row_min+nb_gen-1,2] = nb_gen
file_path = str_c(dir_ne, dir_gen, "final_sumstats.txt")
file_stat = read.table(file_path, header = TRUE)
file_stat = apply(file_stat[-1], 2, mean)
mat_stat[row_min+nb_gen-1,3:62] = file_stat
}
}
mat_stat = as.data.frame(mat_stat)
colnames(mat_stat) = c("Ne", "gen", names(file_stat))
mat_stat$gen = as.integer(mat_stat$gen)
for (numcol in 3:ncol(mat_stat)) {
mat_stat[,numcol] = as.double(mat_stat[,numcol])
}
return(mat_stat)
}
seq_ne = c(2**seq(6,13,1), 10*seq(6,10,1))
mat_save = data.frame.stat(seq_ne, 100)
#Graphiques avec ggplot
p = ggplot(mat_save, aes(x = gen, y = Fst.s1.adm, color = Ne)) +
ggtitle("Stat en fonction des générations\n selon différentes Ne initiales")
p = p + geom_point(size = 2)+ geom_smooth()
p
seq_64_8192 = 2**seq(6,13,1)
seq_60_100 = 10*seq(6,10,1)
seq_tot = c(2**seq(6,13,1), 10*seq(6,10,1))
mat_save = data.frame.stat(seq_60_100, 100)
#Graphiques avec ggplot
p = ggplot(mat_save, aes(x = gen, y = Fst.s1.adm, color = Ne)) +
ggtitle("Stat en fonction des générations\n selon différentes Ne initiales")
p = p + geom_point(size = 2)+ geom_smooth()
p
#Graphiques avec ggplot
p = ggplot(mat_save, aes(x = gen, y = Fst.s1.adm, color = Ne)) +
ggtitle("Stat en fonction des générations\n selon différentes Ne initiales")
p = p + geom_point(size = 2) + geom_line(size=0.8)
#p = p + geom_point(size = 2)+ geom_smooth()
p
#Graphiques avec ggplot
p = ggplot(mat_save, aes(x = gen, y = mean.ASD.s1.adm, color = Ne)) +
ggtitle("Stat en fonction des générations\n selon différentes Ne initiales")
#p = p + geom_point(size = 2) + geom_line(size=0.8)
p = p + geom_point(size = 2)+ geom_smooth()
p
seq_64_8192 = 2**seq(6,13,1)
seq_60_100 = 10*seq(6,10,1)
seq_tot = c(2**seq(6,13,1), 10*seq(6,10,1))
mat_save = data.frame.stat(seq_64_8192, 100)
#Graphiques avec ggplot
p = ggplot(mat_save, aes(x = gen, y = mean.F.adm, color = Ne)) +
ggtitle("Stat en fonction des générations\n selon différentes Ne initiales")
#p = p + geom_point(size = 2) + geom_line(size=0.8)
p = p + geom_point(size = 2)+ geom_smooth()
p
#Graphiques avec ggplot
p = ggplot(mat_save, aes(x = gen, y = perc.90.adm.pros, color = Ne)) +
ggtitle("Stat en fonction des générations\n selon différentes Ne initiales")
#p = p + geom_point(size = 2) + geom_line(size=0.8)
p = p + geom_point(size = 2)+ geom_smooth()
p
#Graphiques avec ggplot
p = ggplot(mat_save, aes(x = gen, y = perc90.adm.props, color = Ne)) +
ggtitle("Stat en fonction des générations\n selon différentes Ne initiales")
#p = p + geom_point(size = 2) + geom_line(size=0.8)
p = p + geom_point(size = 2)+ geom_smooth()
p
#Graphiques avec ggplot
p = ggplot(mat_save, aes(x = gen, y = perc90.adm.props, color = Ne)) +
ggtitle("Stat en fonction des générations\n selon différentes Ne initiales")
#p = p + geom_point(size = 2) + geom_line(size=0.8)
p = p + geom_point(size = 1)+ geom_smooth()
p
#Graphiques avec ggplot
p = ggplot(mat_save, aes(x = gen, y = perc30.adm.props, color = Ne)) +
ggtitle("Stat en fonction des générations\n selon différentes Ne initiales")
#p = p + geom_point(size = 2) + geom_line(size=0.8)
p = p + geom_point(size = 1)+ geom_smooth()
p
View(stock_tmp)
file_stat = read.table(file_path, header = TRUE)
file_stat
file_stat
View(mat_stat)
#Graphiques avec ggplot
p = ggplot(mat_save, aes(x = gen, y = perc100.adm.angles, color = Ne)) +
ggtitle("Stat en fonction des générations\n selon différentes Ne initiales")
#p = p + geom_point(size = 2) + geom_line(size=0.8)
p = p + geom_point(size = 1)+ geom_smooth()
p
